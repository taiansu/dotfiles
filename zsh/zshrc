# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
### Profile
# zmodload zsh/zprof

declare -A homebrew_prefix
homebrew_prefix[x86_64]=/usr/local
homebrew_prefix[arm64]=/opt/homebrew

fpath=(${ASDF_DIR}/completions $fpath)
autoload -Uz compinit bashcompinit

if [[ -n ${ZDOTDIR}/.zcompdump(#qN.mh+24) ]]; then
  compinit;
  bashcompinit;
else
	compinit -C;
fi;

autoload -Uz promptinit colors
colors
promptinit

autoload -Uz url-quote-magic
zle -N self-insert url-quote-magic
autoload -Uz bracketed-paste-url-magic
zle -N bracketed-paste bracketed-paste-url-magic
autoload backward-delete-word
zle -N backward-delete-word

# Default colors:
# White for users, red for root, yellow for system users
local _time="%F{246}[%*]"
# PROMPT_COMMAND='PS1X=$(p="${PWD#${HOME}}"; [ "${PWD}" != "${p}" ] && printf "~";IFS=/; for q in ${p:1}; do printf /${q:0:1}; done; printf "${q:1}")'
local _path="%F{blue}%(4~|%-1~/…/%2~|%3~)"
local _usercol
if [[ $EUID -lt 1000 ]]; then
  # red for root, yellow for system users
  _usercol="%(!.%F{red}.%F{154})"
else
  _usercol="%F{yellow}"
fi
local _user="%{$_usercol%}%n"

local _prompt
if [[ $SHLVL -gt 1 ]]; then
  _prompt="%F{reset_color%}𝝠"
else
  _prompt="%F{reset_color%}𝝺"
fi

if type "gitHUD" > /dev/null; then
  PROMPT='$_path %F{reset_color}$(gitHUD zsh) $_prompt%b%f%k%F{white} '
else
  autoload -Uz vcs_info
  zstyle ':vcs_info:*' enable git
  PROMPT='$_path %F{reset_color}${vcs_info_msg_0_} $_prompt%b%f%k%F{white} '
fi

local RPROMPT='$_time'
if [[ ! -z "$SSH_CLIENT" ]]; then
  RPROMPT="$RPROMPT ⇄" # ssh icon
fi

##
# Environment variables
#

# basedir defaults, in case they're not already set up.
# http://standards.freedesktop.org/basedir-spec/basedir-spec-latest.html
if [[ -z $XDG_DATA_HOME ]]; then
  export XDG_DATA_HOME=$HOME/.local/share
fi

if [[ -z $XDG_CONFIG_HOME ]]; then
  export XDG_CONFIG_HOME=$HOME/.config
fi

if [[ -z $XDG_CACHE_HOME ]]; then
  export XDG_CACHE_HOME=$HOME/.cache
fi

if [[ -z $XDG_DATA_DIRS ]]; then
  export XDG_DATA_DIRS=/usr/local/share:/usr/share
fi

if [[ -z $XDG_CONFIG_DIRS ]]; then
  export XDG_CONFIG_DIRS=/etc/xdg
else
  export XDG_CONFIG_DIRS=/etc/xdg:$XDG_CONFIG_DIRS
fi

# add ~/.config/zsh/completion to completion paths
# NOTE: this needs to be a directory with 0755 permissions, otherwise you will
# get "insecure" warnings on shell load!
# fpath=($XDG_CONFIG_HOME/zsh/completion $fpath)

# FZF
export FZF_DEFAULT_COMMAND='rg --files --follow --hidden -g "!{node_modules/*,.git/*,.idea/*}"'

# ANSIBLE
export ANSIBLE_NOCOWS=1
export OBJC_DISABLE_INITIALIZE_FORK_SAFETY=YES

export ERL_AFLAGS="-kernel shell_history enabled"

# KERL
export KERL_BUILD_DOCS=yes

##
# zsh configuration
#

# Keep 1000 lines of history within the shell and save it to ~/.cache/shell_history
HISTSIZE=1000
SAVEHIST=1000
HISTFILE=$XDG_CACHE_HOME/shell_history

# shell options
setopt PROMPT_SUBST
setopt autocd # assume "cd" when a command is a directory
setopt histignorealldups # Substitute commands in the prompt
setopt sharehistory # Share the same history between all shells
setopt promptsubst # required for git plugin
setopt histignorespace # Ignore command start with space
# setopt extendedglob
# Extended glob syntax, eg ^ to negate, <x-y> for range, (foo|bar) etc.
# Backwards-incompatible with bash, so disabled by default.

# Colors!

# 256 color mode
export TERM="xterm-256color"

##
# Completion system
#

zstyle ":completion:*" auto-description "specify: %d"
zstyle ":completion:*" completer _expand _complete _correct _approximate
zstyle ":completion:*" format "Completing %d"
zstyle ":completion:*" group-name ""
zstyle ":completion:*" menu select=2
zstyle ":completion:*:default" list-colors ${(s.:.)LS_COLORS}
zstyle ":completion:*" list-colors ""
zstyle ":completion:*" list-prompt %SAt %p: Hit TAB for more, or the character to insert%s
zstyle ":completion:*" matcher-list "" "m:{a-z}={A-Z}" "m:{a-zA-Z}={A-Za-z}" "r:|[._-]=* r:|=* l:|=*"
zstyle ":completion:*" menu select=long
zstyle ":completion:*" select-prompt %SScrolling active: current selection at %p%s
zstyle ":completion:*" verbose true

zstyle ":completion:*:*:kill:*:processes" list-colors "=(#b) #([0-9]#)*=0=01;31"
zstyle ":completion:*:kill:*" command "ps -u $USER -o pid,%cpu,tty,cputime,cmd"


##
# Keybinds
#

# Use emacs-style keybindings
bindkey -e

bindkey "$terminfo[khome]" beginning-of-line # Home
bindkey "$terminfo[kend]" end-of-line # End
bindkey "$terminfo[kich1]" overwrite-mode # Insert
bindkey "$terminfo[kdch1]" delete-char # Delete
# bindkey "$terminfo[kcuu1]" up-line-or-history # Up
# bindkey "$terminfo[kcud1]" down-line-or-history # Down
bindkey "$terminfo[kcub1]" backward-char # Left
bindkey "$terminfo[kcuf1]" forward-char # Right
# bindkey "$terminfo[kpp]" # PageUp
# bindkey "$terminfo[knp]" # PageDown
zmodload zsh/terminfo

# Bind shift-tab to backwards-menu
# NOTE this won't work on Konsole if the new tab button is shown
bindkey "\e[Z" reverse-menu-complete

# Make ctrl-v edit the current command line
autoload edit-command-line
zle -N edit-command-line
bindkey "^v" edit-command-line

# Make sure the terminal is in application mode, when zle is
# active. Only then are the values from $terminfo valid.
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init {
    printf "%s" ${terminfo[smkx]}
  }
  function zle-line-finish {
    printf "%s" ${terminfo[rmkx]}
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi

# typing ... expands to ../.., .... to ../../.., etc.
rationalise-dot() {
  if [[ $LBUFFER = *.. ]]; then
    LBUFFER+=/..
  else
    LBUFFER+=.
  fi
}
zle -N rationalise-dot
bindkey . rationalise-dot
bindkey -M isearch . self-insert # history search fix

# Functions
#

# function shorternPwd() {
#   local current_path=${PWD/#$HOME/"~"}
#   local home_path="$(getUniqueFolder $HOME)"
#   local trunc_path="$(getUniqueFolder $PWD)"
#   [[ $current_path == "~"* ]] && current_path="~${trunc_path//${home_path}/}" || current_path="/${trunc_path}"
# }

# function getUniqueFolder() {
#   local trunc_path directory test_dir test_dir_length
#   local -a matching
#   local -a paths
#   local cur_path='/'
#   paths=(${(s:/:)1})
#   for directory in ${paths[@]}; do
#     test_dir=''
#     for (( i=0; i < ${#directory}; i++ )); do
#       test_dir+="${directory:$i:1}"
#       matching=("$cur_path"/"$test_dir"*/)
#       if [[ ${#matching[@]} -eq 1 ]]; then
#         break
#       fi
#     done
#     trunc_path+="$test_dir/"
#     cur_path+="$directory/"
#   done
#   echo "${trunc_path: : -1}"
# }

timezsh() {
  shell=${1-$SHELL}
  for i in $(seq 1 5); do /usr/bin/time $shell -i -c exit; done
}

function mkcd() {
  mkdir "$1"
  cd "$1"
}

# print a separator banner, as wide as the terminal
function hr {
  print ${(l:COLUMNS::=:)}
}

# Hide desktop icons
function desktopIcons() {
  defaults write com.apple.finder CreateDesktop ${1:-true} && killall Finder
}

# Download Gist

function gistDownload() {
  curl -L ${1}/download | tar -xvz --strip-components=1
}

function tagjs() {
  find . -type f -iregex ".*\.js$" -not -path "./node_modules/*" -exec jsctags {} -f \; | sed '/^$/d' | sort > tags
}

function precmd() {
    # Clear the terminal title before running any command.
    # This is a somewhat hacky workaround to Neovim not refreshing the title
    # after it exits.
    echo -ne "\e]1;${PWD##*/}\a"
}

# Extras
#
# if [ -n "$INSIDE_EMACS" ]; then
#   chpwd() { print -P "\033AnSiTc %d" }
#   print -P "\033AnSiTu %n"
#   print -P "\033AnSiTc %d"
# fi

# if [[ -n $INSIDE_EMACS && $(uname) == 'Darwin' ]]; then
#   stty ek
# fi

# source

# zsh-fast-syntax-highlighting
[[ -s $homebrew_prefix[$CPUTYPE]/opt/zsh-fast-syntax-highlighting/share/zsh-fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh ]] && source $homebrew_prefix[$CPUTYPE]/opt/zsh-fast-syntax-highlighting/share/zsh-fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh
# source /opt/homebrew/opt/zsh-fast-syntax-highlighting/share/zsh-fast-syntax-highlighting/fast-syntax-highlighting.plugin.zsh

# zsh-history-substring-search
[[ -s $homebrew_prefix[$CPUTYPE]/share/zsh-history-substring-search/zsh-history-substring-search.zsh ]] && source $homebrew_prefix[$CPUTYPE]/share/zsh-history-substring-search/zsh-history-substring-search.zsh

# zsh-autosuggestions
[[ -s $homebrew_prefix[$CPUTYPE]/share/zsh-autosuggestions/zsh-autosuggestions.zsh ]] && source $homebrew_prefix[$CPUTYPE]/share/zsh-autosuggestions/zsh-autosuggestions.zsh

if [[ test_declare(history-substring-search-up) ]]; then
  bindkey "$terminfo[kcuu1]" history-substring-search-up
  bindkey "$terminfo[kcud1]" history-substring-search-down
fi

# autojump
[ -f $homebrew_prefix[$CPUTYPE]/etc/profile.d/autojump.sh ] && . $homebrew_prefix[$CPUTYPE]/etc/profile.d/autojump.sh

# source homebrew github api token
if [[ -f ~/.homebrew_github_api_token ]]; then
  source ~/.homebrew_github_api_token
fi

source ~/.dotfiles/zsh/aliasrc

# source google-cloud-sdk
if [[ -s $homebrew_prefix[$CPUTYPE]/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc ]]; then
  source $homebrew_prefix[$CPUTYPE]/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc
  source $homebrew_prefix[$CPUTYPE]/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc
fi

if [[ -f ~/.fzf.zsh ]]; then
  source ~/.fzf.zsh

  # Use fd (https://github.com/sharkdp/fd) instead of the default find
  # command for listing path candidates.
  # - The first argument to the function ($1) is the base path to start traversal
  # - See the source code (completion.{bash,zsh}) for the details.
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }
fi

# asdf
if [[ -f ~/.asdf/asdf.sh ]]; then
  source $HOME/.asdf/asdf.sh
fi

# tre
if [[ -f $homebrew_prefix[$CPUTYPE]/bin/tre ]]; then
  tre() { command tre "$@" -e && source "/tmp/tre_aliases_$USER" 2>/dev/null; }
fi

# if [ -n "$INSIDE_EMACS" ]; then
#   bindkey "^[OA" history-substring-search-up
#   bindkey "^[OB" history-substring-search-down
# else
# fi

test -e "${HOME}/.iterm2_shell_integration.zsh" && source "${HOME}/.iterm2_shell_integration.zsh"

# rust
if [ ! -f "$HOME/.config/rustlang/autocomplete/rustup" ]; then
  mkdir -p ~/.config/rustlang/autocomplete
  rustup completions bash rustup >> ~/.config/rustlang/autocomplete/rustup
fi

# idris2
if [[ -f ~/.idris2/bin/idris2 ]]; then
  eval "$(idris2 --bash-completion-script idris2)"
fi

# [ -f "#{HOME}/.ghcup/env" ] && source "/Users/tai/.ghcup/env" # ghcup-env

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"

# call zprof at the end of file
# zprof
